/**
 * Defines AppAgentWebsocket, an easy-to-use websocket implementation of the
 * Conductor API for apps, restricted to a single app provided on initialization
 *
 *    const appWs = AppWebsocket.connect('ws://localhost:9000')
 *
 *    const client = new AppAgentWebsocket(appWs, 'my_installed_app_id')
 *
 *    client.callZome({
 *      role_name: 'my_role_name' // role_name is unique per app, so you can unambiguously identify your dna with role_name in this client,
 *      zome_name: 'zome',
 *      fn_name: 'fn',
 *      payload: { value: 'v' }
 *    })
 *      .then(result => {
 *        console.log('callZome returned with:', result)
 *      })
 *      .catch(err => {
 *        console.error('callZome errored with:', err)
 *      })
 */
import Emittery from "emittery";
import { omit } from "lodash-es";
export class AppAgentWebsocket {
    appWebsocket;
    installedAppId;
    cachedAppInfo;
    emitter = new Emittery();
    constructor(appWebsocket, installedAppId) {
        this.appWebsocket = appWebsocket;
        this.installedAppId = installedAppId;
        this.appWebsocket.on("signal", (signal) => this.emitter.emit("signal", signal));
    }
    async appInfo() {
        const appInfo = await this.appWebsocket.appInfo({
            installed_app_id: this.installedAppId,
        });
        this.cachedAppInfo = appInfo;
        return appInfo;
    }
    async callZome(request, timeout) {
        const role_name = request
            .role_name;
        if (role_name) {
            const appInfo = this.cachedAppInfo || (await this.appInfo());
            const cell_id = appInfo.cell_data.find((c) => c.role_name === role_name)?.cell_id;
            if (!cell_id) {
                throw new Error(`No cell found with role_name ${role_name}`);
            }
            const callZomeRequest = {
                ...omit(request, "role_name"),
                cell_id,
            };
            return this.appWebsocket.callZome(callZomeRequest, timeout);
        }
        else if (request.cell_id) {
            return this.appWebsocket.callZome(request, timeout);
        }
        else {
            throw new Error("callZome requires a role_name or cell_id arg");
        }
    }
    async createCloneCell(args) {
        const clonedCell = this.appWebsocket.createCloneCell({
            app_id: this.installedAppId,
            ...args,
        });
        this.cachedAppInfo = undefined;
        return clonedCell;
    }
    async archiveCloneCell(args) {
        return this.appWebsocket.archiveCloneCell({
            app_id: this.installedAppId,
            ...args,
        });
    }
    on(eventName, listener) {
        return this.emitter.on(eventName, listener);
    }
}
//# sourceMappingURL=websocket.js.map
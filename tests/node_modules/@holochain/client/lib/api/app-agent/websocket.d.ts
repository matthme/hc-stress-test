/**
 * Defines AppAgentWebsocket, an easy-to-use websocket implementation of the
 * Conductor API for apps, restricted to a single app provided on initialization
 *
 *    const appWs = AppWebsocket.connect('ws://localhost:9000')
 *
 *    const client = new AppAgentWebsocket(appWs, 'my_installed_app_id')
 *
 *    client.callZome({
 *      role_name: 'my_role_name' // role_name is unique per app, so you can unambiguously identify your dna with role_name in this client,
 *      zome_name: 'zome',
 *      fn_name: 'fn',
 *      payload: { value: 'v' }
 *    })
 *      .then(result => {
 *        console.log('callZome returned with:', result)
 *      })
 *      .catch(err => {
 *        console.error('callZome errored with:', err)
 *      })
 */
import Emittery, { UnsubscribeFunction } from "emittery";
import { InstalledAppId } from "../../types.js";
import { AppInfoResponse, AppWebsocket, ArchiveCloneCellResponse, CallZomeResponse, CreateCloneCellResponse, InstalledAppInfo } from "../index.js";
import { AppAgentCallZomeRequest, AppAgentClient, AppAgentEvents, AppArchiveCloneCellRequest, AppCreateCloneCellRequest } from "./types.js";
export declare class AppAgentWebsocket implements AppAgentClient {
    appWebsocket: AppWebsocket;
    installedAppId: InstalledAppId;
    cachedAppInfo?: InstalledAppInfo;
    emitter: Emittery<AppAgentEvents, AppAgentEvents & import("emittery").OmnipresentEventData, never>;
    constructor(appWebsocket: AppWebsocket, installedAppId: InstalledAppId);
    appInfo(): Promise<AppInfoResponse>;
    callZome(request: AppAgentCallZomeRequest, timeout?: number): Promise<CallZomeResponse>;
    createCloneCell(args: AppCreateCloneCellRequest): Promise<CreateCloneCellResponse>;
    archiveCloneCell(args: AppArchiveCloneCellRequest): Promise<ArchiveCloneCellResponse>;
    on<Name extends keyof AppAgentEvents>(eventName: Name | readonly Name[], listener: (eventData: AppAgentEvents[Name]) => void | Promise<void>): UnsubscribeFunction;
}

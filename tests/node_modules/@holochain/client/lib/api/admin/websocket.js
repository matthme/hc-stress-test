/**
 * Defines AdminWebsocket, an easy-to-use websocket implementation of the
 * Conductor Admin API
 *
 *    const client = AdminWebsocket.connect(
 *      'ws://localhost:9000'
 *    )
 *
 *    client.generateAgentPubKey()
 *      .then(agentPubKey => {
 *        console.log('Agent successfully generated:', agentPubKey)
 *      })
 *      .catch(err => {
 *        console.error('problem generating agent:', err)
 *      })
 */
import * as Api from "./types.js";
import { WsClient } from "../client.js";
import { catchError, promiseTimeout, DEFAULT_TIMEOUT } from "../common.js";
import { requesterTransformer } from "../common.js";
import { getLauncherEnvironment } from "../../environments/launcher.js";
export class AdminWebsocket {
    client;
    defaultTimeout;
    constructor(client, defaultTimeout) {
        this.client = client;
        this.defaultTimeout =
            defaultTimeout === undefined ? DEFAULT_TIMEOUT : defaultTimeout;
    }
    static async connect(url, defaultTimeout) {
        // Check if we are in the launcher's environment, and if so, redirect the url to connect to
        const env = await getLauncherEnvironment();
        if (env) {
            url = `ws://localhost:${env.ADMIN_INTERFACE_PORT}`;
        }
        const wsClient = await WsClient.connect(url);
        return new AdminWebsocket(wsClient, defaultTimeout);
    }
    _requester = (tag, transformer) => requesterTransformer((req, timeout) => promiseTimeout(this.client.request(req), tag, timeout || this.defaultTimeout).then(catchError), tag, transformer);
    // the specific request/response types come from the Interface
    // which this class implements
    attachAppInterface = this._requester("attach_app_interface");
    // Deprecated
    activateApp = this._requester("activate_app");
    // Deprecated
    deactivateApp = this._requester("deactivate_app");
    enableApp = this._requester("enable_app");
    disableApp = this._requester("disable_app");
    startApp = this._requester("start_app");
    dumpState = this._requester("dump_state", dumpStateTransform);
    dumpFullState = this._requester("dump_full_state");
    generateAgentPubKey = this._requester("generate_agent_pub_key");
    registerDna = this._requester("register_dna");
    getDnaDefinition = this._requester("get_dna_definition");
    installApp = this._requester("install_app");
    uninstallApp = this._requester("uninstall_app");
    installAppBundle = this._requester("install_app_bundle");
    listDnas = this._requester("list_dnas");
    listCellIds = this._requester("list_cell_ids");
    // Deprecated
    listActiveApps = this._requester("list_active_apps");
    listApps = this._requester("list_apps", listAppsTransform);
    listAppInterfaces = this._requester("list_app_interfaces");
    requestAgentInfo = this._requester("request_agent_info");
    addAgentInfo = this._requester("add_agent_info");
    restoreCloneCell = this._requester("restore_clone_cell");
    deleteArchivedCloneCells = this._requester("delete_archived_clone_cells");
    grantZomeCallCapability = this._requester("grant_zome_call_capability");
}
const listAppsTransform = {
    input: (req) => {
        const args = {};
        if (req.status_filter) {
            args.status_filter = getAppStatusInApiForm(req.status_filter);
        }
        return args;
    },
    output: (res) => res,
};
const dumpStateTransform = {
    input: (req) => req,
    output: (res) => {
        return JSON.parse(res);
    },
};
function getAppStatusInApiForm(status_filter) {
    switch (status_filter) {
        case Api.AppStatusFilter.Running:
            return {
                Running: null,
            };
        case Api.AppStatusFilter.Enabled:
            return {
                Enabled: null,
            };
        case Api.AppStatusFilter.Paused:
            return {
                Paused: null,
            };
        case Api.AppStatusFilter.Disabled:
            return {
                Disabled: null,
            };
        case Api.AppStatusFilter.Stopped:
            return {
                Stopped: null,
            };
    }
}
//# sourceMappingURL=websocket.js.map
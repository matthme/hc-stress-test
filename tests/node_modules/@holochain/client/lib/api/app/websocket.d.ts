import Emittery from "emittery";
import { InstalledAppId } from "../../types.js";
import { WsClient } from "../client.js";
import { Requester, Transformer } from "../common.js";
import { AppApi, AppInfoRequest, AppInfoResponse, AppSignalCb, CallZomeRequestGeneric, CallZomeResponseGeneric, ArchiveCloneCellRequest, CreateCloneCellRequest, CreateCloneCellResponse, ArchiveCloneCellResponse, GossipInfoRequest, GossipInfoResponse } from "./types.js";
export declare class AppWebsocket extends Emittery implements AppApi {
    client: WsClient;
    defaultTimeout: number;
    overrideInstalledAppId?: InstalledAppId;
    constructor(client: WsClient, defaultTimeout?: number, overrideInstalledAppId?: InstalledAppId);
    static connect(url: string, defaultTimeout?: number, signalCb?: AppSignalCb): Promise<AppWebsocket>;
    _requester: <ReqO, ReqI, ResI, ResO>(tag: string, transformer?: Transformer<ReqO, ReqI, ResI, ResO> | undefined) => (req: ReqO, timeout?: number | undefined) => Promise<ResO>;
    appInfo: Requester<AppInfoRequest, AppInfoResponse>;
    callZome: Requester<CallZomeRequestGeneric<any>, CallZomeResponseGeneric<any>>;
    createCloneCell: Requester<CreateCloneCellRequest, CreateCloneCellResponse>;
    archiveCloneCell: Requester<ArchiveCloneCellRequest, ArchiveCloneCellResponse>;
    gossipInfo: Requester<GossipInfoRequest, GossipInfoResponse>;
}
